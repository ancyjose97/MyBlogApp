spring.datasource.url=jdbc:mysql://localhost:3306/myblog
spring.datasource.username:root
spring.datasource.password=mypassword

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

spring.jpa.hibernate.ddl-auto=update

#JWT PROPERTIES

#Encrypt the secret key using sha256 encoder online tool
#Eg: here, i have encrypted the word java to be used as secret key

#app.jwt-secret=38a0963a6364b09ad867aa9a66c6d009673c21e182015461da236ec361877f77

#Convert days to milliseconds using online tool
# Eg: here i have converted 7 days to milliseconds

#if the token expires, user will have to reauthenticate for new jwt token.
# but there is also a concept to generate token without user reauthenticating. but that requires additional api endpoints and logic

#app-jwt-expiration-milliseconds=604800000





# STEPS OF CONFIGURING SPRING SECURITY IN THE APPLICATION

# Form based Authentication (Has login and logout url/concept/form)
# 1. By default, when spring boot starter security dependency is added, a default login form with default username as user and password as randomly generated password is created in the console.
# 2. After login, user can access all API's, but when http://localhost:8080/logout is accessed, after that the user should login again to to access the API's.
# 3. To customise the username and password, add the following in application.properties


# spring.security.user.name=ancy
# spring.security.user.password=ancy
# spring.security.user.roles=ADMIN



# 4. for configuring http basic authentication in the application, along with adding above 3 lines in application.properties,
# create SecurityConfig class under config package and add the securityfilterchain method code.

# No login and logout concept / form / url in http basic authenication
# Basic HTTP authentication involves sending the username and password credentials in the HTTP headers with each request.




# 5. In - memory authentication refers to a technique where authentication information is stored and verified in the server's memory
# When a user attempts to authenticate, their credentials are checked against the data stored in memory.
# 6. We can configure multiple user details of the application in SecurityConfig class for in-memory authentication concept.
# 7. Add passswordEncoder() method.
# 8. To enable method level security. i.e to provide role based authorization or to secure REST API's using in-memory authentication
# (that is by configuring multiple users using in-memory authentication method),
#edit security filter chain method and then annotate the class with @enablemethodsecurity and then annotate the controller class required methods with @preauthorize


#****************************************IMPORTANT*********************************************************************************************************************************

# Database authentication
# 9. This time, unlike in-memory concept, We need to store users detail and their roles in DB.
# So we will create user and role entity classes with @manytomany relationship
#i.e. we will establish a relationship like one user can have many roles and one role can be assigned to many users.
#So both classes has @manytomany relationship.

# A 3rd table called users_roles will also be created whenever we use @manytomany.
#user_roles table will have the details of user and role.
#user_roles table will have the primary keys of both user and role tables/entity classes.
#these 2 primary keys will be called as or referenced as foreign keys in user_roles table.

#10. Create CustomUserDetailsService class under security package and override the method loadUserByUsername
#11. Inject Userdetailsservice interface and then create authenticationManager method in security config class.
#12. COMMENT OUT IN-MEMORY CODE userDetailsService METHOD.
# 13. Create some sample records in User and Role and then users_roles table in DB
#14. We shouldn't store password as plain text in DB. So , Create passwordgeneratorencoder class in utils package, run that class and paste in DB the encoded password obtained from console.
# When user submits raw password, authentication manager will authenticate by encrypting the raw pwd using bcryptpassword encoder
# and then compares it with the encrypted pwd stored in DB and then authenticates the user.
#----------------------------------


#create login dto class, authcontroller class, authservice interface and authservice impl class with login method.
# comment ".httpBasic(Customizer.withDefaults()); " this line in securityconfig classs as we are using database authenication now.
#add requestmatchers in securityconfig classs for login api in order to permit all users of the blog application to access login/signup api.

#create register dto class with the fields used in user entity class. because the details which we are registering using register dto should be saved in user repository.
#create register method in auth service interface and override it in auth serviceimpl class.
#create register method in authcontroller class





#SPRING SECURITY + JWT
#Json web token (JWT) is a standard for securing REST API's.
#jwt is used for authorization.
#jwt is used to securely exchanging information.
#Basic authentication sends username & password in header for each request. Bu Jwt sends an encrypted token string in header for each request.

#first, user logs in, server will validate the credentials. if valid when comparing with DB, a jwt token is generated and sent to client along with the response.
#client then sends the jwt token to the server in header along with each REST API request.

#STEPS TO IMPLEMENT JWT

#Add JWT Maven dependencies
#create jwtauthentication entrypoint class in security package with commence method.
#Add JWT secret key and expiration details in application. Properties
#Create jwttokenprovider class with generatetoken method and key() method
#create getUsername method and validatetoken method in jwttokenprovider class.
#create JWTAuthenticationfilter class with getTokenFromRequest method and dofilterinternal  method.
#create JwtAuthResponse class in dto package
#Add these 3 lines  in securityFilterChain method of security config class 
# /*

 #.exceptionHandling((exception) -> exception.authenticationEntryPoint(authenticationEntryPoint))
						
#				.sessionManagement((session) -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		
						
#			httpSecurity.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);


# */
		
# Add this 2 lines to login method of authserviceimpl class.
#String token = jwtTokenProvider.generateToken(authentication);
# return token;

#Add this 4 lines to login method of authcontroller

#String token = authService.login(loginDto);
		
#		JwtAuthResponse jwtAuthResponse = new JwtAuthResponse();
		
#		jwtAuthResponse.setAccessToken(token);
		
#		return new ResponseEntity<JwtAuthResponse>(jwtAuthResponse, HttpStatus.OK);
		





#*************************************************************************************************************************************************************************************